services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-backend
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      retries: 10
      start_period: 10s

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CREATE_TOPICS: "test-topic:1:1"
    networks:
      - kafka-backend
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      retries: 10
      start_period: 10s      

  kafka-alert-exporter:
    image: ghcr.io/vidy0725/autocon3-ws-a3:v1
    container_name: kafka-alert-exporter
    depends_on:
      kafka:
        condition: service_healthy    
    networks:
      - kafka-backend
    ports:
      - "8001:8001"
    volumes:
      - ./alarms.yml:/app/alarms.yml      
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CONFIG_FILE=/app/alarms.yml
      - METRICS_PORT=8001
    command: >
      sh -c "python3 /app/kafka-alert-exporter.py --bootstrap-servers \$${KAFKA_BOOTSTRAP_SERVERS} --plaintext --config \$${CONFIG_FILE} --debug"
    restart: unless-stopped

  kafka-alarm-grafana:
    image: grafana/grafana:latest
    container_name: kafka-alert-grafana
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret  # Change this to your preferred admin password
    depends_on:
      - prometheus
    networks:
      - kafka-backend       
    ports:
      - "3000:3000"
    restart: unless-stopped  

  kafka-alarm-producer:
    image: kafka-alarm-producer
    container_name: kafka-alarm-producer
    depends_on:
      kafka:
        condition: service_healthy 
    networks:
      - kafka-backend
    volumes:
      - ./kafka-alarm-sim-templates:/app/kafka-alarm-sim-templates
      - ./kafka-alarm-producer-config.yml:/app/kafka-alarm-producer-config.yml      
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - TEMPLATE_DIR=/app/kafka-alarm-sim-templates
      - KAFKA_PRD_CFG=/app/kafka-alarm-producer-config.yml
    command: >
      sh -c "python3 /app/kafka-alarm-producer.py --bootstrap-servers \$${BOOTSTRAP_SERVERS} --template-dir \$${TEMPLATE_DIR} --config \$${KAFKA_PRD_CFG}"
    restart: unless-stopped


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - kafka-backend
    ports:
      - "9095:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    networks:
      - kafka-backend
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    restart: unless-stopped

networks:
  kafka-backend:
    driver: bridge
